import seaborn as sns 
import matplotlib.pyplot as plt 

    # data: DataFrame, массив с данными;
    # x, y: имена переменных, которые будут отображены на осях X и Y, соответственно;
    # hue: переменная для группировки данных по цвету;
    # size: переменная, значение которой будет использоваться для изменения размера точек;
    # style: переменная, значение которой будет использоваться для изменения стиля точек или линий;
    # units: имя переменной, которая определяет семантические подгруппы для раздельного отображения каждой точки;
    # weights: имя переменной, которая определяет веса точек (используется при построении регрессии или других статистических моделей);
    # row: имя переменной, которая определяет, как данные будут разбиты на строки при использовании нескольких подграфиков;
    # col: имя переменной, которая определяет, как данные будут разбиты на столбцы при использовании нескольких подграфиков;
    # col_wrap: количество столбцов в сетке подграфиков до переноса на новую строку;
    # row_order: порядок, в котором строки должны быть отображены;
    # col_order: порядок, в котором столбцы должны быть отображены;
    # palette: параметр, определяющий цветовую палитру для переменной hue. Может быть именем палитры, списком цветов или словарем, отображающим уровни переменной в цвета;
    # hue_order: порядок отображения уровней переменной hue;
    # hue_norm: нормализация для цветовой палитры;
    # sizes: значения для переменной size, которые будут отображены в виде размеров маркеров. Может быть словарем или списком значений;
    # size_order: порядок отображения уровней переменной size;
    # size_norm: нормализация для размеров маркеров;
    # markers: маркеры для переменной style. Может быть списком или словарем;
    # dashes: определяет типы линий (например, пунктирные) для переменной style;
    # style_order: определяет порядок отображения уровней переменной style;
    # legend: управляет отображением легенды ('auto', 'brief', 'full', или False);
    # kind: тип графика. Может быть 'scatter' (по умолчанию) для диаграммы рассеяния или 'line' для линейного графика;
    # height: управляет высотой каждого подграфика (по умолчанию height=5);
    # aspect: соотношение ширины и высоты каждого подграфика (по умолчанию aspect=1).

taxis = sns.load_dataset('taxis').dropna()

print(taxis.info())
print(taxis.head())
print('#----------------------------')

    # 'pickup': Дата и время, когда пассажир был подобран.
    # 'dropoff': Дата и время, когда пассажир был высажен.
    # 'passengers': Количество пассажиров в поездке.
    # 'distance': Расстояние поездки, измеренное в милях.
    # 'fare': Стоимость проезда без учета чаевых и сборов, измеренная в долларах.
    # 'tip': Чаевые, данные водителю, измеренные в долларах.
    # 'tolls': Плата за проезд по платным дорогам, измеренная в долларах.
    # 'total': Общая стоимость поездки, включающая проезд, чаевые и сборы, измеренная в долларах.
    # 'color': Цвет такси (желтое или зеленое).
    # 'payment': Способ оплаты (наличные, кредитная карта).
    # 'pickup_zone': Зона, в которой был подобран пассажир.
    # 'dropoff_zone': Зона, в которой пассажир был высажен.
    # 'pickup_borough': Район города, в котором был подобран пассажир (Manhattan, Queens, Bronx, Brooklyn).
    # 'dropoff_borough': Район города, в котором пассажир был высажен.

df = taxis[taxis['pickup_borough'] == 'Queens']

print(df.head())

sns.relplot(df, x = 'pickup', y = 'total')
plt.xticks(rotation = 60)

plt.show()


# by day.name
df = df.assign(day_name = lambda x: x['pickup'].dt.day_name(),
               day_of_week = lambda x: x['pickup'].dt.day_of_week)
sns.relplot(df.sort_values('day_of_week'), x = 'day_name',
            y = 'total',
            hue = 'color',
            palette=['yellow', 'green'],
            kind = 'line',
            style='color',
            # col = 'payment'             # деление на подграфики по категориальной переменной
            row = 'payment'               # деление на подграфики по категориальной переменной
            )
plt.xticks(rotation = 60)

plt.show()

# по райнонам посадки
g = sns.relplot(taxis, x = 'pickup', y = 'total',
            height=4,
            hue = 'color',
            palette=['yellow', 'green'],
            col = 'pickup_borough')
# plt.xticks(rotation = 60)             # применяется только к последнему графику
for ax in g.axes.flat:                  # применяется к каждому графику 
    for label in ax.get_xticklabels():
            label.set_rotation(60)

plt.show()

